local state = require "main.state.game"

-- Map all ore type sprites here
local ore_types = {
	"/assets/resources/ore.sprite"
}

-- Create and initialize custom game object property
go.property("ore_type_id", 1)

local gravity = state.game_state.get_state_property(state.StateEnum.Physics.Gravity)
local initial_ore_drop_velocity = 100

function init(self)
	if self.properties then
		-- render the ore sprite based on the provider sprite url
		sprite.play_flipbook("#sprite", ore_types[self.ore_type_id])
	end
	
	self.velocity = vmath.vector3(0, initial_ore_drop_velocity, 0)
	self.grounded = false
	self.time = 0
end

function update(self, dt)
	if not self.grounded then
		local position = go.get_position()
		self.time = self.time + dt

		-- Randomize the x direction of travel
		if self.velocity.x == 0 then -- You might want to change this condition
			local direction = math.random(-1, 1)
			self.velocity.x = direction * initial_ore_drop_velocity
		end

		-- Update position based on velocity and gravity
		position.x = position.x + self.velocity.x * dt
		position.y = position.y + self.velocity.y * dt + 0.5 * gravity * self.time * self.time

		go.set_position(position)
	else
		-- reset volatile state
		self.grounded = false
		self.time = 0
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.group == hash("ground") then
			self.velocity = vmath.vector3(0, 0, 0)
			self.grounded = true
		end
	end
end