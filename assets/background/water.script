local WIDTH = math.floor(tonumber(sys.get_config("display.width")))

function init(self)
	-- No need to render water level initially - since player will be mining down
	msg.post(".", "disable")
	self.rise_started = false;
	self.size = go.get("#sprite", "size")
end

-- Figure out the start pos for water GO so that it is rendered at the viewport y = 0 and in the middle of the screen.
local function get_start_pos(self)
	local scale = go.get("water", "scale")
	local pos_y = (self.size.y * (-1 *scale.y)) / 2
	local pos_x = WIDTH / 2
	msg.post("@render:", "screen_to_world", { x = pos_x, y = pos_y, response_url = msg.url() })
end

local function start_water_rise(self, start_at_pos)
	-- render it behind tiles?
	start_at_pos.z = -0.1
	go.set_position(start_at_pos)
	-- Show sprite
	msg.post(".", "enable")

	-- Animate water all the way to the surface line. 10 is the speed of it rising might need to adjust this as needed
	go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_FORWARD, self.size.y * -1, go.EASING_LINEAR, 10)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start") then
		if not self.rise_started then
			msg.post("/gui#ui", "debug_water_level")
			get_start_pos(self)
		end
	elseif message_id == hash("contact_point_response") then
		if message.group == hash("player") then
			msg.post("proxy:/controller#controller", "load_hub")
		end
	elseif message_id == hash("screen_to_world_response") then
		self.rise_started = true
		start_water_rise(self, vmath.vector3(message.result.x, message.result.y, 1))
	end
end