local SCREEN_WIDTH = sys.get_config("display.width")
local RENDERED_TREE_MAP = {};
local TREE_WIDTH = { 25, 50, 250 } -- minimal distance between tree sprites

local function can_create_tree(self, tree_index, pos)
	-- Check if new tree position is far enough from previous tree
	for _, tree_data in pairs(RENDERED_TREE_MAP) do
		if math.abs(tree_data.pos.x - pos.x) < TREE_WIDTH[tree_index] then
			return false
		end
	end
	
	if tree_index == 3 then
		-- Do not create trees between already created trees
		if pos.x > self.min_x and pos.x < self.max_x then
			return false
		end
	end
	return true
end

local function render_tree(self, pos, tree_index)
	if can_create_tree(self, tree_index, pos) then
		local tree = factory.create("#factory", pos, nil, { index = tree_index });
		RENDERED_TREE_MAP[tree] = {pos = pos, out_of_view_port = false, index = tree_index };
		if pos.x > self.max_x then
			self.max_x = pos.x;
		elseif pos.x < self.min_x then
			self.min_x = pos.x;
		end
	end
end

local function create_tree(self, generation_range, tree_index)
	-- local weighted_tree_indeces = { 1, 1, 1, 2, 2, 2, 3, 3 }
	-- local tree_index = weighted_tree_indeces[math.random(#weighted_tree_indeces)]
	-- TODO: randomize
	-- local tree_index = 3;
	local player = go.get_position('/player/player#player');
	if generation_range == nil then
		-- render trees outside of the rightmost side of viewport
		local x_right = math.random(player.x + (SCREEN_WIDTH / 2), player.x + (SCREEN_WIDTH / 2) + 500);
		local pos_right = vmath.vector3(x_right, 0, -0.18 + tree_index / 1000);
		render_tree(self, pos_right, tree_index)

		-- render trees outside of the leftmost side of viewport
		local x_left = math.random(player.x - (SCREEN_WIDTH / 2) - 500, player.x - (SCREEN_WIDTH / 2));
		local pos_left = vmath.vector3(x_left, 0, -0.18 + tree_index / 1000);
		render_tree(self, pos_left, tree_index)
	else
		local rand_x = math.random(generation_range.from, generation_range.to);
		local pos = vmath.vector3(rand_x, 0, -0.18 + tree_index / 1000)
		render_tree(self, pos, tree_index)
	end
end

function init(self)
	local player = go.get_position('/player/player#player')
	
	self.max_x = player.x; -- tracks position of the leftmost tree coordinate
	self.min_x = player.x; -- tracks position of the rightmost tree coordinate
	-- 288 is where the grass is
	self.HORIZON_Y = 30; -- y-coord for tree placement
	self.timer = 0;
	self.direction = 0
	
	-- TODO: improve this. Generate stuff for everything thats in viewport
	local generation_range = {from = player.x - (SCREEN_WIDTH / 2), to = player.x + (SCREEN_WIDTH / 2)}
	create_tree(self, generation_range, 3)
	create_tree(self, generation_range, 3)
	create_tree(self, generation_range, 1)
	create_tree(self, generation_range, 2)
	create_tree(self, generation_range, 2)
end

function update(self, dt)
	if self.timer > 2 and self.direction ~= 0 then
		create_tree(self, nil, 3);
		create_tree(self, nil, 2);
		create_tree(self, nil, 1);
		self.timer = 0;
	end
	self.timer = self.timer + dt;
	self.direction = 0
end

function on_message(self, message_id, message, sender)
	if message_id == hash('player_moving') then
		self.direction = message.direction
	end
end