local state = require "main.state.game"
local rendercam = require "rendercam.rendercam"
update_crosshair_position = hash("update_crosshair_position")

function init(self)

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- reset active node
	state.game_state.set_state_property(state.StateEnum.Level.MouseOverTileHash, nil)
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == update_crosshair_position then
		local new_position = rendercam.screen_to_world_2d(message.x, message.y, false, 1)
		go.set_position(new_position)
	elseif message_id == hash("contact_point_response") then
		if message.group == hash("ground") then
			state.game_state.set_state_property(state.StateEnum.Level.MouseOverTileHash, message.other_id)
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
