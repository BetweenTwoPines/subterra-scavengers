local rendercam = require "rendercam.rendercam"
local state = require "main.state.game"

local max_energy = state.game_state.get_state_property(state.StateEnum.Player.MaxEnergy)
local TILE_SIZE = state.game_state.get_state_property(state.StateEnum.Level.TileSize)
local TILE_TYPE = state.game_state.get_state_property(state.StateEnum.Level.TileType)

local function get_key(x, y)
	return ("%d-%d"):format(x, y)
end

local function canRemoveTile(self, targetTileX, targetTileY)
	local playerPosition = go.get_position()
	local x = math.ceil(playerPosition.x / TILE_SIZE)
	local y = math.ceil(playerPosition.y / TILE_SIZE)
	if math.abs(x - targetTileX) > 1 or math.abs(y - targetTileY) > 1 then
		return false
	else
		return true
	end	
end

function on_input(self, action_id, action)
	if action_id == hash("interact") and action.pressed then
		local availableEnergy = state.game_state.get_state_property(state.StateEnum.Player.CurrentEnergy)
		local hoveredOverNode = state.game_state.get_state_property(state.StateEnum.Level.MouseOverTileHash)
		local pos = go.get_position(hoveredOverNode)
		local key = get_key(pos.x / TILE_SIZE, pos.y / TILE_SIZE)

		if hoveredOverNode then
			print("hit detected---------------")
			pprint(key)
			pprint(map[key])
			local hitpoints = map[key].hitpoints - 50
			map[key].hitpoints = hitpoints
			if hitpoints <= 0 then
				msg.post("/main#main", "delete_tile", { key = key})
				go.delete(state.game_state.get_state_property(state.StateEnum.Level.MouseOverTileHash))
				--  empty tiles dont drop anything
				if map[key].tile_type ~= TILE_TYPE.EMPTY then
					factory.create("/factory#ore_factory", pos, nil, {ore_type_id = 1})
				end
			end
		end
	end
end