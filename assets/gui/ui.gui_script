local state = require "main.state.game"

local ore_img_map = {
	[state.ReverseTileTypeEnum[state.TileTypeEnum.IRON_ORE]] = "silver-ore_1",
	[state.ReverseTileTypeEnum[state.TileTypeEnum.GOLD_ORE]] = "gold-ore_1"
}

local function select_tool(index)
	local active_tool_id = state.game_state[state.StateEnum.Player.SelectedTool]
	local active_tool_node = nil
	local active_tool_pos = nil
	if active_tool_id then 
		active_tool_node = gui.get_node(active_tool_id)
		active_tool_pos = gui.get_position(active_tool_node)
	end
	local new_tool_id = state.game_state[state.StateEnum.Player.BeltItems][index]
	local new_tool_node = gui.get_node(new_tool_id)
	local new_tool_pos = gui.get_position(new_tool_node)

	-- If a tool is already selected and its not the same as new
	if active_tool_id ~= new_tool_id and active_tool_id then 
		-- Lower current active tool back into belt
		active_tool_pos.y = active_tool_pos.y - 50
		gui.set_position(active_tool_node, active_tool_pos)
		
		-- Raise new tool from belt
		state.game_state[state.StateEnum.Player.SelectedTool] = new_tool_id
		new_tool_pos.y = new_tool_pos.y + 50
		gui.set_position(new_tool_node, new_tool_pos)
	elseif active_tool_id then -- If we are selecting same tool thats active, put it back into belt
		active_tool_pos.y = active_tool_pos.y - 50
		gui.set_position(active_tool_node, active_tool_pos)
		state.game_state[state.StateEnum.Player.SelectedTool] = nil
	else
		-- No active tool selected, select it
		state.game_state[state.StateEnum.Player.SelectedTool] = new_tool_id
		new_tool_pos.y = new_tool_pos.y + 50
		gui.set_position(new_tool_node, new_tool_pos)
	end
end

local function render_belt_equipment()
	local belt = gui.get_node("belt")
	local all_tools = state.game_state[state.StateEnum.Player.BeltItems]
	
	-- Populate belt with tools
	for index, item in ipairs(all_tools) do
		local new_x_position = -20 + (20 * (index - 1))
		local new_node = gui.new_box_node(vmath.vector3(new_x_position, 0, 0), vmath.vector3(120, 200, 0))  -- Position and size of the node

		gui.set_texture(new_node, "ui")
		gui.set_layer(new_node, "border")
		gui.set_id(new_node, item)
		gui.play_flipbook(new_node, item)
		gui.set_parent(new_node, belt)
	end

	-- Always select the first available tool by default
	select_tool(1)
end

-- Renders current inventory type behind the scenes so its ready when users needs to open it
local function init_inventory(self)
	local inventory_node = gui.get_node("inventory")
	self.inventory_initial_position = gui.get_position(inventory_node)
	gui.set_texture(inventory_node, "ui")
	gui.play_flipbook(inventory_node, "pouch")
	gui.set_scale(inventory_node, vmath.vector3(0.5, 0.5, 0))

	local inventory_type = state.game_state[state.StateEnum.Inventory.Type]
	local inventory_cell_size = vmath.vector3(175, 175, 0)
	if inventory_type == state.InventoryTypeEnum.POUCH then
		-- pouch only has 2 cells
		for i = 1, 2 do
			local cell_node = gui.new_box_node(vmath.vector3(0, i * (-60 * (i - 1)), 0), inventory_cell_size)
			gui.set_texture(cell_node, "ui")
			gui.play_flipbook(cell_node, "inventory_cell")
			gui.set_id(cell_node, "cell_"..i)

			-- text node for displayling count of a resource
			local resource_count_text_node = gui.new_text_node(vmath.vector3(-20, -20, 0),"")
			gui.set_font(resource_count_text_node, "system_font")
			gui.set_color(resource_count_text_node, vmath.vector3(0, 0, 0))
			gui.set_id(resource_count_text_node, "cell_"..i.."_text")
			gui.set_scale(resource_count_text_node, vmath.vector3(1.7, 1.7, 0))

			local resource_image = gui.new_box_node(vmath.vector3(0, 0, 0), vmath.vector3(35, 35, 0))
			gui.set_id(resource_image, "cell_"..i.."_type")
			
			gui.set_parent(resource_count_text_node, cell_node)
			gui.set_parent(resource_image, cell_node)
			gui.set_parent(cell_node, inventory_node)
		end
	end
end

local function toggle_inventory(self)
	local inventory_node = gui.get_node("inventory")
	if self.inventory_open then
		gui.animate(inventory_node, "position.x", self.inventory_initial_position, gui.EASING_INOUTQUAD, 1)
	else
		gui.animate(inventory_node, "position.x", self.inventory_initial_position.x - 400, gui.EASING_INOUTQUAD, 1)
	end
	self.inventory_open = not self.inventory_open
end

local function update_inventory_items()
	local all_resources = state.game_state[state.StateEnum.Inventory.Items.Resources]
	local i = 1
	-- TODO: this needs to be optimized. There is no need to update every inventory cell when one type of resource is picked up
	for key, resource in pairs(all_resources) do
		local resource_count = hash("cell_" .. i .. "_text")
		local resource_image = hash("cell_" .. i .. "_type")
		local resource_count_text_node = gui.get_node(resource_count)
		local resource_image_node = gui.get_node(resource_image)

		if resource.count then
			-- Update the text node with the current count
			gui.set_text(resource_count_text_node, tostring(resource.count))
			gui.set_texture(resource_image_node, "resources")
			gui.play_flipbook(resource_image_node, ore_img_map[key])
		else
			gui.set_text(resource_count_text_node, "")
		end
		i = i + 1
	end
end

function init(self)
	-- Save original size of the bar
	self.energy_bar_bg_size = gui.get(gui.get_node("energy_bar_bg"), "size")
	self.health_bar_bg_size = gui.get(gui.get_node("health_bar_bg"), "size")
	self.inventory_open = false
	self.inventory_initial_position = nil

	render_belt_equipment()
	init_inventory(self)
end

local function update_bar(self, node_id, bar_bg_size, scale_ratio)
	local bar_node = gui.get_node(node_id)
	local current_size = gui.get(bar_node, "size")
	local current_pos = gui.get_position(bar_node)

	-- Calculate the new width based on the scale ratio
	local new_width = bar_bg_size.x * scale_ratio

	-- Update the node's size
	gui.set_size(bar_node, vmath.vector3(new_width, bar_bg_size.y, 0))

	-- Calculate the horizontal shift to anchor the left side
	local shift = (current_size.x - new_width) / 2
	current_pos.x = current_pos.x - shift

	-- Update the node's position
	gui.set_position(bar_node, current_pos)
end

local function update_round_timer(self, timeleft)
	local minutes = math.floor(timeleft / 60)
	local seconds = timeleft % 60

	local formattedTime = string.format("%02d:%02d", minutes, seconds)
	
	gui.set_text(gui.get_node("round_timer_text"), "Round timer " .. formattedTime)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("use_energy") then
		update_bar(self, "energy_bar_bg", self.energy_bar_bg_size, message.energyRemainingRatio)
	elseif message_id == hash("debug_tile_count") then
		gui.set_text(gui.get_node("debug_tile_count"), ("total: %d, visible: %d"):format(message.total, message.visible))
	elseif message_id == hash("update_heatlh") then
		local health_remaining_ratio = state.game_state[state.StateEnum.Player.CurrentHealth] / state.game_state[state.StateEnum.Player.MaxHealth]
		update_bar(self, "health_bar_bg", self.health_bar_bg_size, health_remaining_ratio)
	elseif message_id == hash("debug_coordinates") then
		gui.set_text(gui.get_node("debug_coordinates"), ("x: %d, y: %d"):format(message.x, message.y))
	elseif message_id == hash("debug_water_level") then
		gui.set_text(gui.get_node("debug_water_level_rising"), "Water rising: yes")
	elseif message_id == hash("update_round_timer") then
		update_round_timer(self, message.timeleft)
	elseif message_id == hash("select_belt_tool") then
		select_tool(message.item_number)
	elseif message_id == hash("toggle_inventory") then
		toggle_inventory(self)
	elseif message_id == hash("update_inventory") then
		update_inventory_items()
	end
end