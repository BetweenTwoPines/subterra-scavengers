local state_module = require "main.state.game"
local game_state = state_module.game_state
local State = state_module.StateEnum

local function updateGUIValues(self)
	-- Set players energy
	-- gui.set_text(gui.get_node("energy_value"), self.state.max_energy)
	gui.set_text(gui.get_node("energy_value"), game_state.get_state_property(State.Player.MaxEnergy))

	-- Set players health
	-- gui.set_text(gui.get_node("health_value"), self.state.max_health)
	gui.set_text(gui.get_node("health_value"), game_state.get_state_property(State.Player.MaxHealth))

	-- Set players speed
	gui.set_text(gui.get_node("speed_value"), game_state.get_state_property(State.Player.MaxSpeed))

	-- Set players speed
	-- gui.set_text(gui.get_node("money_value"), "$" .. self.state.coins)
	gui.set_text(gui.get_node("money_value"), "$" .. game_state.get_state_property(State.Player.Coins))
end

-- Dynamically generates inventory grid based on on the position of initial node
local function create_inventory_grid(self)
	local cell_id = hash("inventory_cell") -- The original cell node ID
	local initial_node = gui.get_node(cell_id)
	local cell_position = gui.get_position(initial_node)
	
	for row = 1, game_state.get_state_property(State.Inventory.Row) do
		for col = 1, game_state.get_state_property(State.Inventory.Col) do
			-- avoid duplicating initial_node
			if row ~= 1 or col ~= 1 then
				-- Clone the inventory_cell node
				local cloned_nodes = gui.clone_tree(initial_node)
				local cloned_cell_id = cloned_nodes[cell_id]

				local x_pos = ((col - 1) * 30) + cell_position.x
				local y_pos = ((row - 1) * -20) + cell_position.y
				local position = vmath.vector3(x_pos, y_pos, 0) -- Assuming top-down layout

				-- Set the position of the cloned cell
				gui.set_position(cloned_cell_id, position)
			end
		end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	create_inventory_grid(self)
	updateGUIValues(self)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)

end

function on_input(self, action_id, action)
	if action_id == hash("interact") and action.released then
		if gui.pick_node(gui.get_node("play_btn"), action.x, action.y) then
			msg.post("proxy:/controller#controller", "load_level")
		elseif gui.pick_node(gui.get_node("main_menu_btn"), action.x, action.y) then
			msg.post("proxy:/controller#controller", "show_menu")
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
