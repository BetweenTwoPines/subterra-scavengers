local state = require "main.state.game"

local base_conversion_rates = {
	[state.ReverseTileTypeEnum[state.TileTypeEnum.IRON_ORE]] = 10,
	[state.ReverseTileTypeEnum[state.TileTypeEnum.GOLD_ORE]] = 25,
}

local function update_gui_values(self)
	-- Set players energy
	gui.set_text(gui.get_node("energy_value"), state.game_state[state.StateEnum.Player.MaxEnergy])

	-- Set players health
	gui.set_text(gui.get_node("health_value"), state.game_state[state.StateEnum.Player.MaxHealth])

	-- Set players speed
	-- gui.set_text(gui.get_node("speed_value"), state.game_state[state.StateEnum.Player.MaxSpeed])

	-- Set players speed
	gui.set_text(gui.get_node("money_value"), state.game_state[state.StateEnum.Player.Coins])
end

-- Adjust conversion rates
local function adjust_conversion_rates()
	math.randomseed(os.time())
	local adjusted_rates = {}
	for ore, base_rate in pairs(base_conversion_rates) do
		-- Random factor between 0.8 and 1.2 to modify the base rate
		local random_factor = math.random(80, 120) / 100
		adjusted_rates[ore] = base_rate * random_factor
	end
	return adjusted_rates
end

local function calculate_earnings()
	local random_rates = adjust_conversion_rates()
	local resources = state.game_state[state.StateEnum.Inventory.Items.Resources]
	local total_coins = 0
	for ore_type, value in pairs(resources) do
		local oreRate = random_rates[ore_type] or 0
		total_coins = total_coins + (oreRate * value.count)
	end
	state.game_state[state.StateEnum.Player.Coins] = state.game_state[state.StateEnum.Player.Coins] + math.floor(total_coins)
	state.game_state[state.StateEnum.Inventory.Items.Resources] = {}
end

function init(self)
	msg.post(".", "acquire_input_focus")

	calculate_earnings()
	update_gui_values(self)
end

function on_input(self, action_id, action)
	if action_id == hash("interact") and action.released then
		if gui.pick_node(gui.get_node("play_btn"), action.x, action.y) then
			msg.post("proxy:/controller#controller", "load_level")
		elseif gui.pick_node(gui.get_node("main_menu_btn"), action.x, action.y) then
			msg.post("proxy:/controller#controller", "load_menu")
		end
	end
end