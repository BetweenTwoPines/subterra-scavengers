local state = require "main.state.game"
local perlin = require "main.perlin"
local LAYER1 = hash("layer1")

local TILE_TYPE = state.TileTypeEnum
local TILE_SIZE = state.game_state.get_state_property(state.StateEnum.Level.TileSize)

local WIDTH = math.floor(tonumber(sys.get_config("display.width")) / TILE_SIZE - 3)
local HEIGHT = math.floor(tonumber(sys.get_config("display.height")) / TILE_SIZE - 2)
local half_screen_width = math.floor(WIDTH / 2) + 1
local half_screen_height = math.floor(HEIGHT / 2) + 1

local viewport = {}
local ore_viewport = {}
local visible_tiles_count = 0
local total_tiles_count = 0


local function get_key(x, y)
	return ("%d-%d"):format(x, y)
end

local function create_tile(x, y, key) 
	local p = vmath.vector3(x * TILE_SIZE, y * TILE_SIZE, 0)
	local id = factory.create("/tile_factory#tile_factory", p, nil, 
	 { 
		tile_type = state.game_state[state.StateEnum.Level.Tiles][key].tile_type, 
		key = hash(key), 
		tile_sprite = state.game_state[state.StateEnum.Level.Tiles][key].tile_sprite and hash(state.game_state[state.StateEnum.Level.Tiles][key].tile_sprite) or nil
	})
	state.game_state[state.StateEnum.Level.Tiles][key].id = id
	viewport[key] = {
		id = id,
		x = x,
		y = y
	}
	
	visible_tiles_count = visible_tiles_count + 1
	msg.post("/gui#ui", "debug_tile_count", {total = total_tiles_count, visible = visible_tiles_count})
end

local function cleanup_outside_of_viewport(min_x, max_x, min_y, max_y) 
	for key, entry in pairs(viewport) do
		if entry.x > max_x or entry.x < min_x or entry.y > max_y or entry.y < min_y then
			go.delete(entry.id, true)
			viewport[key] = nil
			visible_tiles_count = visible_tiles_count - 1
			msg.post("/gui#ui", "debug_tile_count", {total = total_tiles_count, visible = visible_tiles_count})		
		end
	end
end

local function cleanup_ore_outside_of_viewport(min_x, max_x, min_y, max_y) 
	for key, entry in pairs(ore_viewport) do
		if entry.x_floor > max_x or entry.x_floor < min_x or entry.y_floor > max_y or entry.y_floor < min_y then
			if ore_viewport[key].id ~= nil then
				local new_pos = go.get_position(entry.id)
				local new_pos_rounded = vmath.vector3(math.floor(new_pos.x / TILE_SIZE), math.floor(new_pos.y / TILE_SIZE), 0)
				local new_key = get_key(new_pos_rounded.x, new_pos_rounded.y)
				go.delete(entry.id, true)
				if new_key ~= key then
					ore_viewport[new_key] = {
						id = nil,
						x_floor = new_pos_rounded.x,
						y_floor = new_pos_rounded.y,
						y = new_pos.y,
						x = new_pos.x,
					}
					ore_viewport[key] = nil
				else
					ore_viewport[key].id = nil
				end
			end
		end
	end
end

local function render_viewport(min_x, max_x, min_y, max_y)
	for x = min_x, max_x, 1 do
		for y = min_y, max_y, 1 do
			local key = get_key(x, y)
			if state.game_state[state.StateEnum.Level.Tiles][key].hitpoints > 0 and viewport[key] == nil then
				create_tile(x, y, key)
			end
		end
	end
	for x = min_x, max_x, 1 do
		for y = min_y, max_y, 1 do
			local key = get_key(x, y)
			if state.game_state[state.StateEnum.Level.Tiles][key].tile_type ~= nil and state.game_state[state.StateEnum.Level.Tiles][key].hitpoints > 0 then
				local sprite = state.get_sprite(x, y)
				msg.post(state.game_state[state.StateEnum.Level.Tiles][key].id, "update_tile_sprite",  { sprite = sprite })
			end
		end
	end
end

local function render_ore(min_x, max_x, min_y, max_y)
	for x = min_x, max_x, 1 do
		for y = min_y, max_y, 1 do
			local key = get_key(x, y)
			if ore_viewport[key] and not ore_viewport[key].id then
				local pos = vmath.vector3(ore_viewport[key].x, ore_viewport[key].y, 0)
				local ore = factory.create("/factory#ore_factory", pos, nil, { ore_type_id = 2, rerender = true })
				ore_viewport[key].id = ore
			end
		end
	end
end

local function update_level(tx, ty)
	local max_y = 0
	local min_y = ty - half_screen_height
	local max_x = tx + half_screen_width
	local min_x = tx - half_screen_width
	if ty + half_screen_height < 0 then
		max_y = ty + half_screen_height
	end 
	for x = min_x, max_x, 1 do
		for y = min_y, max_y, 1 do
			local key = get_key(x, y)
			if state.game_state[state.StateEnum.Level.Tiles][key] == nil then
				local tile_type = TILE_TYPE.DIRT
				local tile_sprite = nil
				local hitpoints = 200
				local n = perlin.noise((tx + x) / 10, (ty + y) / 10, 0.3)
				if n < -0.3 then
					tile_type = TILE_TYPE.GOLD_ORE
					tile_sprite = state.TileSpriteAnimations.GOLD_ORE
					hitpoints = 200
				elseif n < -0.25 then	
					tile_type = TILE_TYPE.IRON_ORE
					hitpoints = 200
					tile_sprite = state.TileSpriteAnimations.IRON_ORE
				elseif n < -0.2 then
					tile_type = TILE_TYPE.EMPTY
					hitpoints = 0
				elseif n < 0.05 then
					tile_type = TILE_TYPE.DIRT
					hitpoints = 200
					tile_sprite = state.TileSpriteAnimations.DIRT
				end

				if tyle_type ~= TILE_TYPE.EMPTY then				
					state.game_state[state.StateEnum.Level.Tiles][key] = {
						tile_type = tile_type,
						hitpoints = hitpoints,
						tile_sprite = tile_sprite,
						x = x,
						y = y
					}
					total_tiles_count = total_tiles_count + 1
				end
			end
		end
	end
	render_viewport(min_x, max_x, min_y, max_y)
	render_ore(min_x, max_x, min_y, max_y)
	cleanup_outside_of_viewport(min_x, max_x, min_y, max_y)
	cleanup_ore_outside_of_viewport(min_x, max_x, min_y, max_y)
end

function init(self)
	perlin.init()
	print(("widht: %d, height: %d"):format(WIDTH, HEIGHT))
	update_level(0, 0)
	self.previous_px = 0
	self.previous_py = 0

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	local player = go.get_position("/player/player#player")
	local px = player.x
	local py = player.y

	local tx = math.floor(px / TILE_SIZE)
	local ty = math.floor(py / TILE_SIZE)
	
	local previous_tx = math.floor(self.previous_px / TILE_SIZE)
	local previous_ty = math.floor(self.previous_py / TILE_SIZE)
	
	if tx ~= previous_tx or ty ~= previous_ty then
		update_level(tx, ty)
	end
	
	self.previous_px = px
	self.previous_py = py
end

function on_message(self, message_id, message, sender)
	if message_id == hash("delete_tile") then
		viewport[message.key] = nil
	elseif message_id == hash("create_ore") then
		local pos = go.get_position(message.key)
		print("NEW POSITION CREATED", pos.x, pos.y)
		local pos_rounded = vmath.vector3(math.floor(pos.x / TILE_SIZE), math.floor(pos.y / TILE_SIZE),0)
		local key = get_key(pos_rounded.x, pos_rounded.y)
		print("CREATE ORE KEY", key)
		ore_viewport[key] = {
			id = message.key,
			x_floor = pos_rounded.x,
			y_floor = pos_rounded.y,
			y = pos.y,
			x = pos.x,
		}
		pprint("view_port", ore_viewport)
	elseif message_id == hash("delete_ore") then
		ore_viewport[message.id] = nil
	elseif message_id == hash("reset_previous_state") then
		local key = get_key(message.previous_pos_key.x, message.previous_pos_key.y)
		table.remove(ore_viewport, key)
	end
end