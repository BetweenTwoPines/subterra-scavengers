local msg_contact_point_response = hash("contact_point_response")
local group_obstacle = hash("ground")

-- max speed right/left
local max_speed = 200
-- gravity pulling the player down in pixel units
local gravity = -1900

function init(self)
	msg.post(".", "acquire_input_focus")
	
	self.velocity = vmath.vector3()
	self.correction = vmath.vector3()
	self.facing_direction = 0
	self.speed = 150
	self.ground_contact = false
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	-- apply gravity
	self.velocity.y = self.velocity.y + gravity * dt

	-- move player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
end

local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall. Stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.velocity.x = 0
	end
	-- collided with the ground. stop vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

function dig()
	local playerPosition = go.get_position()

	-- size of each tile on the level
	local tileSize = 64
	local tileX = math.ceil(playerPosition.x / tileSize)
	-- Subtracting 1 to dig 'below' the player
	local tileY = math.ceil(playerPosition.y / tileSize) - 1

	-- remove tile
	tilemap.set_tile("/level#level", 'layer1', tileX, tileY, 0)
end

local function walk(self, direction)
	-- only change facing direction if direction is other than 0
	if direction ~= 0 then
		self.facing_direction = direction
	end
	-- update velocity and use different velocity on ground
	if self.ground_contact then
		self.velocity.x = max_speed * direction
	end
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		walk(self, -action.value)
	elseif action_id == hash("right") then
		walk(self, action.value)
	elseif action_id == hash("dig") then
		dig()
	end
end