
local rendercam = require "rendercam.rendercam"
local msg_contact_point_response = hash("contact_point_response")
local group_obstacle = hash("ground")

local TILE_SIZE = 64

-- max speed right/left
local max_speed = 150
local max_upwards_speed = 500
local no_energy_upwards_speed = 100
-- gravity pulling the player down in pixel units
local gravity = -1900
local anim_idle = hash("player_idle")
local anim_walk_right = hash("player_right")
local anim_walk_left = hash("player_left")

local max_energy = 5

local energy_regen_interval_in_seconds = 2

function init(self)
	defos.set_cursor_visible(false)
	msg.post("#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post(".", "acquire_input_focus")
	
	self.velocity = vmath.vector3()
	self.correction = vmath.vector3()
	self.facing_direction = 0
	self.speed = 150
	self.ground_contact = false
	self.wall_contact = false
    self.current_energy = max_energy
  
	-- the currently playing animation
	self.currentAnimation = nil
	timer.delay(energy_regen_interval_in_seconds, true, function(self) 
		updateEnergy(self, 1)
	end)
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.currentAnimation ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.currentAnimation = anim
	end
end

local function update_animations(self)
	-- make sure the player character faces the right way
	sprite.set_hflip("#player", self.facing_direction < 0)
	if self.velocity.x == 0 then
		play_animation(self, anim_idle)
	else
		if self.facing_direction == 1 then
			play_animation(self, anim_walk_right)
		else
			play_animation(self, anim_walk_left)
		end
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	-- apply gravity
	self.velocity.y = self.velocity.y + gravity * dt

	-- move player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	-- update player animation based its state
	update_animations(self)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
end

local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall. Stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground. stop vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

function removeTile(x, y)
	tilemap.set_tile("/level#level", 'layer1', x, y, 0)
end

function updateEnergy(self, changeBy)
	if (changeBy < 0 and self.current_energy > 0) or (changeBy > 0 and self.current_energy < max_energy) then
		self.current_energy = self.current_energy + changeBy
		-- notify GUI to scale energy bar
		msg.post("/gui#ui", "use_energy", {energyRemainingRatio = self.current_energy / max_energy})
	end
end 

function try_dig(self, x, y)
	if self.current_energy > 0 then
		dig(self, x , y)
	else
		-- TODO: handle some kind of notification
	end
end

function dig(self, x, y)
	removeTile(x, y)

	-- update energy counter
	updateEnergy(self, -1)
end

local function walk(self, direction)
	-- only change facing direction if direction is other than 0
	if direction ~= 0 then
		self.facing_direction = direction
	end
	if self.wall_contact ~= true then
		-- notify background to move with player
		msg.post("/sky#sky", "move_background", { direction = self.facing_direction * -1 })
		msg.post("/treeline#treeline", "move_background", { direction = self.facing_direction * -1 })
	end
	-- update velocity and use different velocity on ground
	self.velocity.x = max_speed * direction
end

local function canRemoveTile(self, targetTileX, targetTileY)
	local playerPosition = go.get_position()
	local x = math.ceil(playerPosition.x / TILE_SIZE)
	local y = math.ceil(playerPosition.y / TILE_SIZE)
	if math.abs(x - targetTileX) > 1 or math.abs(y - targetTileY) > 1 then
		return false
	else
		return true
	end	
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		walk(self, -action.value)
	elseif action_id == hash("right") then
		walk(self, action.value)
	elseif action_id == hash("jump") then
		if (self.velocity.y == 0) then
			if (self.current_energy > 0) then
				updateEnergy(self, -1)
				self.velocity.y = max_upwards_speed
			else 
				self.velocity.y = no_energy_upwards_speed
			end
		end
	elseif action_id == hash("interact") and action.pressed then
		local clickPosition = rendercam.screen_to_world_2d(action.screen_x, action.screen_y, false, 0)
		local x = math.ceil(clickPosition.x / TILE_SIZE)
		local y = math.ceil(clickPosition.y / TILE_SIZE)
		local currentTile = tilemap.get_tile("/level#level", 'layer1', x, y)
		
		-- cannot dig through outside walls of the level and father than adjacent tile to character
		if currentTile ~= 23 and canRemoveTile(self, x, y) then
			try_dig(self, x, y)
		end
	elseif action_id == hash("escape") then
		msg.post("@system:", "exit", {code = 0})
	end
	msg.post("/crosshair", update_crosshair_position, { x = action.screen_x, y = action.screen_y })
end
