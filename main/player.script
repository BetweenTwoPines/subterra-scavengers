local state = require "main.state.game"
local rendercam = require "rendercam.rendercam"
local msg_contact_point_response = hash("contact_point_response")
local group_obstacle = hash("ground")
-- max speed right/left
local max_speed = state.game_state.get_state_property(state.StateEnum.Player.MaxSpeed)
local TILE_SIZE = state.game_state.get_state_property(state.StateEnum.Level.TileSize)
local gravity = state.game_state.get_state_property(state.StateEnum.Physics.Gravity)

local max_upwards_speed = 500
local no_energy_upwards_speed = 100
-- gravity pulling the player down in pixel units
local anim_idle = hash("player_idle")
local anim_walk_right = hash("player_right")
local anim_walk_left = hash("player_left")
local hit_left = hash("player_pickaxe_hit_left")
local hit_right = hash("player_pickaxe_hit_right")

function init(self)
	defos.set_cursor_visible(false)
	msg.post("#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post(".", "acquire_input_focus")

	self.isHitInProgress = false
	self.velocity = vmath.vector3()
	self.correction = vmath.vector3()
	self.facing_direction = 0
	self.speed = 150
	self.ground_contact = false
	self.wall_contact = false
  
	-- the currently playing animation
	self.currentAnimation = nil

	self.fall_start_height = nil -- Tracks the height at which the player starts falling
	self.fall_damage_height = 80 -- The fall height threshold for taking damage
	self.is_falling = false
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.currentAnimation ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.currentAnimation = anim
	end
end

local function update_animations(self)
	if self.isHitInProgress then
		return
	end
	-- make sure the player character faces the right way
	sprite.set_hflip("#player", self.facing_direction < 0)
	if self.velocity.x == 0 then
		play_animation(self, anim_idle)
	else
		if self.facing_direction == 1 then
			play_animation(self, anim_walk_right)
		else
			play_animation(self, anim_walk_left)
		end
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function apply_damage(self, fall_distance)
	-- 1 damage unit per 10 pixels fallen beyond the threshold
	local fall_damage = (fall_distance - self.fall_damage_height) / 10
	local newHealth = state.game_state[state.StateEnum.Player.CurrentHealth] - fall_damage
	if newHealth <= 0 then
		-- You are dead
		msg.post("proxy:/controller#controller", "show_menu")
	else
		state.game_state[state.StateEnum.Player.CurrentHealth] = newHealth
		msg.post("/gui#ui", "debug_health")
	end
end

function update(self, dt)
	-- apply gravity
	self.velocity.y = self.velocity.y + gravity * dt

	-- move player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	if not self.ground_contact and self.velocity.y < 0 then -- The player is in the air and moving downwards
		if not self.is_falling then -- The fall has just started
			self.fall_start_height = go.get_position().y
			self.is_falling = true
		end
	elseif self.ground_contact and self.is_falling then -- The player has landed
		local fall_distance = self.fall_start_height - go.get_position().y
		if fall_distance >= self.fall_damage_height then
			-- local damage = calculate_fall_damage(self, fall_distance)
			apply_damage(self, fall_distance)
		end
		self.is_falling = false
	end

	-- update player animation based its state
	update_animations(self)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
end

local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall. Stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground. stop vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

function notifyEnergyController(self, changeBy)
	msg.post("#energy_controller", "update_energy", {energyUsed = changeBy})
end

local function walk(self, direction)
	-- only change facing direction if direction is other than 0
	if direction ~= 0 then
		self.facing_direction = direction
	end
	if self.wall_contact ~= true then
		-- apply parralax effect to background
		msg.post("/background/scroller#scroller", "move_background", { direction = self.facing_direction * -1 })
	end
	-- update velocity and use different velocity on ground
	self.velocity.x = max_speed * direction
end

local function hit_animation_callback(self)
	self.isHitInProgress = false 
end

local function animate_hit(self, direction)
	self.isHitInProgress = true
	if direction < 0 then
		sprite.play_flipbook("#sprite", hit_left, hit_animation_callback)
		self.currentAnimation = hit_left
	else
		sprite.play_flipbook("#sprite", hit_right, hit_animation_callback)
		self.currentAnimation = hit_right
	end
end

local function isEnoughEnergy() 
	return state.game_state.get_state_property(state.StateEnum.Player.CurrentEnergy) > 0
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		walk(self, -action.value)
	elseif action_id == hash("right") then
		walk(self, action.value)
	elseif action_id == hash("jump") then
		if (self.velocity.y == 0) then
			if (isEnoughEnergy()) then
				particlefx.play('#jump_dust')
				notifyEnergyController(self, -1)
				self.velocity.y = max_upwards_speed
			else 
				self.velocity.y = no_energy_upwards_speed
			end
		end
	elseif action_id == hash("interact") and action.pressed then
		if (not isEnoughEnergy()) then
			return
		end
		local hit_direction = go.get_world_position("/crosshair").x > go.get_position().x and 1 or -1
		animate_hit(self, hit_direction)
		notifyEnergyController(self, -1)
	elseif action_id == hash("first_belt_tool") and action.pressed then
		msg.post("/gui#ui", "select_belt_tool", {item_number = 1})
	elseif action_id == hash("toggle_inventory") and action.pressed then
		msg.post("/gui#ui", "toggle_inventory")
	elseif action_id == hash("escape") then
		msg.post("@system:", "exit", {code = 0})
	end
	msg.post("/crosshair", update_crosshair_position, { x = action.screen_x, y = action.screen_y, player_pos = go.get_position() })
end
