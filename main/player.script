local msg_contact_point_response = hash("contact_point_response")
local group_obstacle = hash("ground")

function init(self)
	msg.post(".", "acquire_input_focus")

	self.moving = false
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0)
	self.speed = 150
	self.correction = vmath.vector3()
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	end

	self.input.x = 0
	self.input.y = 0
	self.moving = false
end

local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		-- self.wall_contact = true
		self.speed = 0
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

function dig()
	local playerPosition = go.get_position()

	-- size of each tile on the level
	local tileSize = 64
	local tileX = math.ceil(playerPosition.x / tileSize)
	-- Subtracting 1 to dig 'below' the player
	local tileY = math.ceil(playerPosition.y / tileSize) - 1

	-- remove tile
	tilemap.set_tile("/level#level", 'layer1', tileX, tileY, 0)
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	elseif action_id == hash("dig") then
		dig()
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end

	-- reset volatile state
	self.correction = vmath.vector3()
	self.speed = 150
end