local state = require "main.state.game"

local max_round_time = state.game_state.get_state_property(state.StateEnum.Level.MaxRoundTimeSeconds)

local function show(self, proxy)
	if self.current_proxy then
		-- make sure we unload proxies that are not in use
		msg.post(self.current_proxy, "unload")
		self.current_proxy = nil
	end
	-- Might need to render loading screen here while we load level
	msg.post(proxy, "async_load")
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.current_proxy = nil
	self.timer = max_round_time
	self.round_loaded = false
	msg.post("#", "load_level")
end

function update(self, dt)
	-- Start the timer when round is loaded
	if self.timer > 0 and self.round_loaded then
		self.timer = self.timer - dt
		-- Only update time when the actual level is loaded
		if self.current_proxy and self.current_proxy.fragment == hash("levelproxy")  then
			msg.post("main:/gui#ui", "update_round_timer", {timeleft = self.timer})
		end
		if self.timer <= 0 then
			self.round_loaded = false
			show(self, "#hubproxy")
			self.timer = max_round_time
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_menu") then
		show(self, "#menuproxy")
	elseif message_id == hash("load_level") then
		state.reset_player_stats()
		self.timer = max_round_time
		show(self, "#levelproxy")
		self.round_loaded = true
	elseif message_id == hash("load_hub") then
		show(self, "#hubproxy")
	elseif message_id == hash("load_options") then
		show(self, "#optionsproxy")
	elseif message_id == hash("proxy_loaded") then
		self.current_proxy = sender
		msg.post(sender, "enable")
	end
end