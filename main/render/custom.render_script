-- Copyright 2020-2024 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
-- 
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
-- 
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

--
-- message constants
--
local MSG_CLEAR_COLOR =         hash("clear_color")
local MSG_WINDOW_RESIZED =      hash("window_resized")
local MSG_SET_VIEW_PROJ =       hash("set_view_projection")
local MSG_SET_CAMERA_PROJ =     hash("use_camera_projection")
local MSG_USE_STRETCH_PROJ =    hash("use_stretch_projection")
local MSG_USE_FIXED_PROJ =      hash("use_fixed_projection")
local MSG_USE_FIXED_FIT_PROJ =  hash("use_fixed_fit_projection")

local DEFAULT_NEAR = -1
local DEFAULT_FAR =   1
local DEFAULT_ZOOM =  1

--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function get_fixed_projection(camera, state)
	camera.zoom = camera.zoom or DEFAULT_ZOOM
	local projected_width = state.window_width / camera.zoom
	local projected_height = state.window_height / camera.zoom
	local left = -(projected_width - state.width) / 2
	local bottom = -(projected_height - state.height) / 2
	local right = left + projected_width
	local top = bottom + projected_height
	return vmath.matrix4_orthographic(left, right, bottom, top, camera.near, camera.far)
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function get_fixed_fit_projection(camera, state)
	camera.zoom = math.min(state.window_width / state.width, state.window_height / state.height)
	return get_fixed_projection(camera, state)
end
--
-- projection that stretches content
--
local function get_stretch_projection(camera, state)
	return vmath.matrix4_orthographic(0, state.width, 0, state.height, camera.near, camera.far)
end
--
-- projection for gui
--
local function get_gui_projection(camera, state)
	return vmath.matrix4_orthographic(0, state.window_width, 0, state.window_height, camera.near, camera.far)
end

local function update_clear_color(state, color)
	if color then
		state.clear_buffers[render.BUFFER_COLOR_BIT] = color
	end
end

local function update_camera(camera, state)
	camera.proj = camera.projection_fn(camera, state)
	camera.frustum.frustum = camera.proj * camera.view
end

local function update_state(state)
	state.window_width = render.get_window_width()
	state.window_height = render.get_window_height()
	state.valid = state.window_width > 0 and state.window_height > 0
	if not state.valid then
		return false
	end
	-- Make sure state updated only once when resize window
	if state.window_width == state.prev_window_width and state.window_height == state.prev_window_height then
		return true
	end
	state.prev_window_width = state.window_width
	state.prev_window_height = state.window_height
	state.width = render.get_width()
	state.height = render.get_height()
	for _, camera in pairs(state.cameras) do
		update_camera(camera, state)
	end
	return true
end

local function init_camera(camera, projection_fn, near, far, zoom)
	camera.view = vmath.matrix4()
	camera.near = near == nil and DEFAULT_NEAR or near
	camera.far = far == nil and DEFAULT_FAR or far
	camera.zoom = zoom == nil and DEFAULT_ZOOM or zoom
	camera.projection_fn = projection_fn
end

local function create_predicates(...)
	local arg = {...}
	local predicates = {}
	for _, predicate_name in pairs(arg) do
		predicates[predicate_name] = render.predicate({predicate_name})
	end
	return predicates
end

local function create_camera(state, name, is_main_camera)
	local camera = {}
	camera.frustum = {}
	state.cameras[name] = camera
	if is_main_camera then
		state.main_camera = camera
	end
	return camera
end

local function create_state()
	local state = {}
	local color = vmath.vector4(0, 0, 0, 0)
	color.x = sys.get_config_number("render.clear_color_red", 0)
	color.y = sys.get_config_number("render.clear_color_green", 0)
	color.z = sys.get_config_number("render.clear_color_blue", 0)
	color.w = sys.get_config_number("render.clear_color_alpha", 0)
	state.clear_buffers = {
		[render.BUFFER_COLOR_BIT] = color,
		[render.BUFFER_DEPTH_BIT] = 1,
		[render.BUFFER_STENCIL_BIT] = 0
	}
	state.cameras = {}
	return state
end

function init(self)
	self.predicates = create_predicates("tile", "gui", "particle", "model", "debug_text", "light", "quad")

	local state = create_state()
	self.state = state
	local camera_world = create_camera(state, "camera_world", true)
	init_camera(camera_world, get_stretch_projection)
	local camera_gui = create_camera(state, "camera_gui")
	init_camera(camera_gui, get_gui_projection)
	update_state(state)

	self.player_y = 0
	self.ambient_color = self.state[render.BUFFER_DEPTH_BIT]

	local color_params = { 
		format = render.FORMAT_RGBA,
		width = render.get_window_width(),
		height = render.get_window_height(),
		min_filter = render.FILTER_LINEAR,
		mag_filter = render.FILTER_LINEAR,
		u_wrap = render.WRAP_CLAMP_TO_EDGE,
		v_wrap = render.WRAP_CLAMP_TO_EDGE
	}

	local parameters = {
		[render.BUFFER_COLOR_BIT] = color_params
	}

	self.render_target_world = render.render_target("player", parameters)
	self.render_target_lights = render.render_target("lights", parameters)
end

local IDENTITY_MATRIX = vmath.matrix4()

function render_to_render_target(render_target, draw_function)
	render.set_render_target(render_target)
	draw_function()
	render.set_render_target(render.RENDER_TARGET_DEFAULT)
end

-- Default clearing of the screen buffers with a given clear color
--
local function clear_with_color(clear_color)
	-- clear screen buffers
	-- turn on depth_mask before `render.clear()` to clear it as well
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	-- render.clear(clear_color)
	render.clear({[render.BUFFER_COLOR_BIT] = clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

end

function update(self)
	local state = self.state
	if not state.valid then
		if not update_state(state) then
			return
		end
	end

	local predicates = self.predicates

	render.set_viewport(0, 0, state.window_width, state.window_height)

	-- setup camera view and projection
	local camera_world = state.cameras.camera_world

	render.set_view(camera_world.view)
	render.set_projection(camera_world.proj)
	render.clear(state.clear_buffers)

	render_to_render_target(self.render_target_world, function()
		clear_with_color(state.clear_buffers[render.BUFFER_COLOR_BIT])

		-- set states used for all the world predicates
		render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
		render.enable_state(render.STATE_DEPTH_TEST)

		-- render `model` predicate for default 3D material
		--
		render.enable_state(render.STATE_CULL_FACE)
		render.draw(predicates.model, camera_world.frustum)
		render.set_depth_mask(false)
		render.disable_state(render.STATE_CULL_FACE)

		-- render the other components: sprites, tilemaps, particles etc
		--
		render.enable_state(render.STATE_BLEND)
		render.draw(predicates.tile, camera_world.frustum)
		render.draw(predicates.particle, camera_world.frustum)
		render.disable_state(render.STATE_DEPTH_TEST)

		render.draw_debug3d()

	end)

	render_to_render_target(self.render_target_lights, function()
		clear_with_color(self.ambient_color)

		-- set states used for all the world predicates
		render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
		render.enable_state(render.STATE_DEPTH_TEST)

		-- render `model` predicate for default 3D material
		--
		render.enable_state(render.STATE_CULL_FACE)
		render.draw(predicates.model, camera_world.frustum)
		render.set_depth_mask(false)
		render.disable_state(render.STATE_CULL_FACE)

		-- render the other components: sprites, tilemaps, particles etc
		--
		render.enable_state(render.STATE_BLEND)
		render.draw(predicates.light, camera_world.frustum)
		render.disable_state(render.STATE_DEPTH_TEST)
	end)

	-- render to quad
	--
	render.set_view(IDENTITY_MATRIX)
	render.set_projection(IDENTITY_MATRIX)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.enable_material(hash("lights"))

	render.enable_texture(0, self.render_target_world, render.BUFFER_COLOR0_BIT)
	render.enable_texture(1, self.render_target_lights, render.BUFFER_COLOR0_BIT)

	render.draw(predicates.quad)

	render.disable_texture(0)
	render.disable_texture(1)

	render.disable_material()

	-- render GUI
	--
	local camera_gui = state.cameras.camera_gui
	render.set_view(camera_gui.view)
	render.set_projection(camera_gui.proj)

	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(predicates.gui, camera_gui.frustum)
	render.draw(predicates.debug_text, camera_gui.frustum)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.disable_state(render.STATE_BLEND)
end

local function screen_to_world(x, y, z, self)
	local inv = vmath.inv(self.camera_projection * self.state.main_camera.view)
	x = (2 * x / render.get_width()) - 1
	y = (2 * y / render.get_height()) - 1
	z = (2 * z) - 1
	local x1 = x * inv.m00 + y * inv.m01 + z * inv.m02 + inv.m03
	local y1 = x * inv.m10 + y * inv.m11 + z * inv.m12 + inv.m13
	local z1 = x * inv.m20 + y * inv.m21 + z * inv.m22 + inv.m23
	return vmath.vector3(x1, y1, z1)
end

-- Calculate ambient color for the world, used for making the world darker as the user moves down into ground
function handle_world_light(self)
	if self.player_y and self.player_y < 0 then
		local max_depth = -300  -- depth at which the color is darkest
		local depth_ratio = self.player_y / max_depth

		-- Clamp the factor to ensure it's between 0 and 0.85
		local factor = math.max(0, math.min(depth_ratio, 0.85))

		local white = vmath.vector4(1) -- default, no darkening
		local dark = vmath.vector4(0, 0, 0, 1)  -- Full black
		
		-- Linearly interpolate between white and dark based on the factor
		local color = white + (dark - white) * factor
		self.ambient_color = color
	else
		self.ambient_color = vmath.vector4(1, 1, 1, 1)
	end
end

function on_message(self, message_id, message)
	local state = self.state
	local camera = state.main_camera
	if message_id == MSG_CLEAR_COLOR then
		update_clear_color(state, message.color)
	elseif message_id == MSG_WINDOW_RESIZED then
		update_state(state)
	elseif message_id == MSG_SET_VIEW_PROJ then
		camera.view = message.view
		self.camera_projection = message.projection or vmath.matrix4()
		update_camera(camera, state)
	elseif message_id == MSG_SET_CAMERA_PROJ then
		camera.projection_fn = function() return self.camera_projection end
	elseif message_id == MSG_USE_STRETCH_PROJ then
		init_camera(camera, get_stretch_projection, message.near, message.far)
		update_camera(camera, state)
	elseif message_id == MSG_USE_FIXED_PROJ then
		init_camera(camera, get_fixed_projection, message.near, message.far, message.zoom)
		update_camera(camera, state)
	elseif message_id == MSG_USE_FIXED_FIT_PROJ then
		init_camera(camera, get_fixed_fit_projection, message.near, message.far)
		update_camera(camera, state)
	elseif message_id == hash("update_player_position") then
		self.player_y = message.y
		handle_world_light(self)
	elseif message_id == hash("flashlight_cone_collision_ray") then
		self.max_light_distance = message.fraction
		self.light_pos = message.pos
	elseif message_id == hash("draw_debug_line") then
		-- Helper to debug render things
		self.debug_line = {from = message.from, to = message.to}
	elseif message_id == hash("screen_to_world") then
		-- Send a response back to the sender
		if message.response_url then
			local world_coords = screen_to_world(message.x,message.y, 0, self)
			msg.post(message.response_url, "screen_to_world_response", { result = world_coords })
		end
	end
end
